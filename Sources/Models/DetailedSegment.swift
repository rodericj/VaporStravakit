//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Vapor

public struct DetailedSegment: Content {

    public enum ActivityType: String, Codable, Equatable, CaseIterable {
        case ride = "Ride"
        case run = "Run"
    }

    public var activityType: ActivityType?

    public var athletePrEffort: SummarySegmentEffort?

    public var athleteSegmentStats: SummaryPRSegmentEffort?

    /** The segment's average grade, in percents */
    public var averageGrade: Float?

    /** The segments's city. */
    public var city: String?

    /** The category of the climb [0, 5]. Higher is harder ie. 5 is Hors cat√©gorie, 0 is uncategorized in climb_category. */
    public var climbCategory: Int?

    /** The segment's country. */
    public var country: String?

    /** The segment's distance, in meters */
    public var distance: Float?

    /** The segments's highest elevation, in meters */
    public var elevationHigh: Float?

    /** The segments's lowest elevation, in meters */
    public var elevationLow: Float?

    public var endLatlng: LatLng?

    /** The unique identifier of this segment */
    public var id: Int?

    /** The segments's maximum grade, in percents */
    public var maximumGrade: Float?

    /** The name of this segment */
    public var name: String?

    /** Whether this segment is private. */
    public var `private`: Bool?

    public var startLatlng: LatLng?

    /** The segments's state or geographical region. */
    public var state: String?

    /** The number of unique athletes who have an effort for this segment */
    public var athleteCount: Int?

    /** The time at which the segment was created. */
    public var createdAt: DateTime?

    /** The total number of efforts for this segment */
    public var effortCount: Int?

    /** Whether this segment is considered hazardous */
    public var hazardous: Bool?

    public var map: PolylineMap?

    /** The number of stars for this segment */
    public var starCount: Int?

    /** The segment's total elevation gain. */
    public var totalElevationGain: Float?

    /** The time at which the segment was last updated. */
    public var updatedAt: DateTime?

    enum CodingKeys: String, CodingKey {
        case activityType = "activity_type"
        case athletePrEffort = "athlete_pr_effort"
        case athleteSegmentStats = "athlete_segment_stats"
        case averageGrade = "average_grade"
        case city = "city"
        case climbCategory = "climb_category"
        case country = "country"
        case distance = "distance"
        case elevationHigh = "elevation_high"
        case elevationLow = "elevation_low"
        case endLatlng = "end_latlng"
        case id = "id"
        case maximumGrade = "maximum_grade"
        case name = "name"
        case `private` = "private"
        case startLatlng = "start_latlng"
        case state = "state"
        case athleteCount = "athlete_count"
        case createdAt = "created_at"
        case effortCount = "effort_count"
        case hazardous = "hazardous"
        case map = "map"
        case starCount = "star_count"
        case totalElevationGain = "total_elevation_gain"
        case updatedAt = "updated_at"
    }

}
