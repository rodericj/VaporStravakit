//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Vapor

public struct SummaryActivity: Content {

    /** The unique identifier of the activity */
    public var id: Int?

    /** The number of achievements gained during this activity */
    public var achievementCount: Int?

    public var athlete: MetaAthlete?

    /** The number of athletes for taking part in a group activity */
    public var athleteCount: Int?

    /** The activity's average speed, in meters per second */
    public var averageSpeed: Float?

    /** Average power output in watts during this activity. Rides only */
    public var averageWatts: Float?

    /** The number of comments for this activity */
    public var commentCount: Int?

    /** Whether this activity is a commute */
    public var commute: Bool?

    /** Whether the watts are from a power meter, false if estimated */
    public var deviceWatts: Bool?

    /** The activity's distance, in meters */
    public var distance: Float?

    /** The activity's elapsed time, in seconds */
    public var elapsedTime: Int?

    /** The activity's highest elevation, in meters */
    public var elevHigh: Float?

    /** The activity's lowest elevation, in meters */
    public var elevLow: Float?

    public var endLatlng: LatLng?

    /** The identifier provided at upload time */
    public var externalId: String?

    /** Whether this activity is flagged */
    public var flagged: Bool?

    /** The id of the gear for the activity */
    public var gearId: String?

    /** Whether the logged-in athlete has kudoed this activity */
    public var hasKudoed: Bool?

    /** The total work done in kilojoules during this activity. Rides only */
    public var kilojoules: Float?

    /** The number of kudos given for this activity */
    public var kudosCount: Int?

    /** Whether this activity was created manually */
    public var manual: Bool?

    public var map: PolylineMap?

    /** The activity's max speed, in meters per second */
    public var maxSpeed: Float?

    /** Rides with power meter data only */
    public var maxWatts: Int?

    /** The activity's moving time, in seconds */
    public var movingTime: Int?

    /** The name of the activity */
    public var name: String?

    /** The number of Instagram photos for this activity */
    public var photoCount: Int?

    /** Whether this activity is private */
    public var `private`: Bool?

    /** The time at which the activity was started. */
    public var startDate: DateTime?

    /** The time at which the activity was started in the local timezone. */
    public var startDateLocal: DateTime?

    public var startLatlng: LatLng?

    /** The timezone of the activity */
    public var timezone: String?

    /** The activity's total elevation gain. */
    public var totalElevationGain: Float?

    /** The number of Instagram and Strava photos for this activity */
    public var totalPhotoCount: Int?

    /** Whether this activity was recorded on a training machine */
    public var trainer: Bool?

    public var type: ActivityType?

    /** The identifier of the upload that resulted in this activity */
    public var uploadId: Int?

    /** The unique identifier of the upload in string format */
    public var uploadIdStr: String?

    /** Similar to Normalized Power. Rides with power meter data only */
    public var weightedAverageWatts: Int?

    /** The activity's workout type */
    public var workoutType: Int?

    enum CodingKeys: String, CodingKey {
        case id = "id"
        case achievementCount = "achievement_count"
        case athlete = "athlete"
        case athleteCount = "athlete_count"
        case averageSpeed = "average_speed"
        case averageWatts = "average_watts"
        case commentCount = "comment_count"
        case commute = "commute"
        case deviceWatts = "device_watts"
        case distance = "distance"
        case elapsedTime = "elapsed_time"
        case elevHigh = "elev_high"
        case elevLow = "elev_low"
        case endLatlng = "end_latlng"
        case externalId = "external_id"
        case flagged = "flagged"
        case gearId = "gear_id"
        case hasKudoed = "has_kudoed"
        case kilojoules = "kilojoules"
        case kudosCount = "kudos_count"
        case manual = "manual"
        case map = "map"
        case maxSpeed = "max_speed"
        case maxWatts = "max_watts"
        case movingTime = "moving_time"
        case name = "name"
        case photoCount = "photo_count"
        case `private` = "private"
        case startDate = "start_date"
        case startDateLocal = "start_date_local"
        case startLatlng = "start_latlng"
        case timezone = "timezone"
        case totalElevationGain = "total_elevation_gain"
        case totalPhotoCount = "total_photo_count"
        case trainer = "trainer"
        case type = "type"
        case uploadId = "upload_id"
        case uploadIdStr = "upload_id_str"
        case weightedAverageWatts = "weighted_average_watts"
        case workoutType = "workout_type"
    }

}
